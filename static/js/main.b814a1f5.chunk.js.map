{"version":3,"sources":["App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limitToLast","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","displayName","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","type","props","messageClass","scr","alt","width","height","App","useAuthState","user","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAUAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjB,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAqB3B,SAASC,IAMP,OACE,wBAAQC,UAAW,SAASC,QANN,WACtB,IAAMC,EAAW,IAAId,IAASS,KAAKM,mBACnCN,EAAKO,gBAAgBF,IAIrB,iCAIJ,SAASG,IACP,OAAOR,EAAKS,aACV,wBAAQL,QAAS,kBAAKJ,EAAKU,WAA3B,sBAIJ,SAASC,IAEP,IAAMC,EAAQC,mBAERC,EAAcb,EAAUc,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,YAAY,KAE3D,EAAmBC,YAAkBH,EAAO,CAACI,QAAS,OAA/CC,EAAP,oBAEA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAW,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAEmB5B,EAAKS,YAAnCoB,EAFW,EAEXA,IAAKC,EAFM,EAENA,SAAUC,EAFJ,EAEIA,YAFJ,SAIZjB,EAAYkB,IAAI,CACpBC,KAAMV,EACNW,UAAW3C,IAASU,UAAUkC,WAAWC,kBACzCP,MACAC,WACAC,gBATgB,OAYlBP,EAAa,IAEbZ,EAAMyB,QAAQC,eAAe,CAAEC,SAAU,WAdvB,2CAAH,sDAiBjB,OACE,qCACE,iCACGlB,GAAYA,EAASmB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAEvD,qBAAKC,IAAKjC,OAGZ,uBAAMkC,SAAUrB,EAAhB,UACE,uBAAOsB,MAAOxB,EAAWyB,SAAU,SAACtB,GAAD,OAAOF,EAAaE,EAAEuB,OAAOF,UAEhE,wBAAQG,KAAK,SAAb,0BAQR,SAASR,EAAYS,GACnB,MAA4CA,EAAMR,QAA3CV,EAAP,EAAOA,KAAMJ,EAAb,EAAaA,IAAKC,EAAlB,EAAkBA,SAAUC,EAA5B,EAA4BA,YAEtBqB,EAAevB,IAAQ7B,EAAKS,YAAYoB,IAAM,OAAS,WAE7D,OACE,sBAAK1B,UAAS,kBAAciD,GAA5B,UACE,qBAAKC,IAAMvB,EAAUwB,IAAI,SAASC,MAAO,GAAIC,OAAQ,KACrD,6BAAKvB,IACL,4BAAIF,OAMK0B,MAjGf,WAEE,MAAeC,YAAa1D,GAArB2D,EAAP,oBAEA,OACE,sBAAKxD,UAAU,MAAf,UACE,mCACE,sEACA,cAACK,EAAD,OAGF,oCACGmD,EAAO,cAAChD,EAAD,IAAe,cAACT,EAAD,IADzB,WC9BN0D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b814a1f5.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth'; \nimport 'firebase/compat/firestore';\n\nimport {useAuthState} from 'react-firebase-hooks/auth';\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCNVT7EHmkQHo9Lj_pBmxou6-wq4s98p14\",\n  authDomain: \"soccergc-c2a08.firebaseapp.com\",\n  projectId: \"soccergc-c2a08\",\n  storageBucket: \"soccergc-c2a08.appspot.com\",\n  messagingSenderId: \"234409779677\",\n  appId: \"1:234409779677:web:5f9991b9a895982b03d634\",\n  measurementId: \"G-5MQ26DHG1M\"\n\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth); // how to see if someone is signed in\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h2>Welcome to the SC Men's Soccer Chat </h2>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />} {/*if user is signed in show chatRoom or signin */}\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn(){\n  const signInWithGoogle =() => {\n    const provider = new firebase.auth.GoogleAuthProvider(); // how to sign in \n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <button className= \"signIn\" onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n}\n\nfunction SignOut(){\n  return auth.currentUser && (\n    <button onClick={()=> auth.signOut()}>Sign Out</button>\n  )\n}\n\nfunction ChatRoom(){\n\n  const dummy = useRef();\n\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limitToLast(100);\n\n  const [messages] = useCollectionData(query, {idField: 'id'}); //listens for hook and updates data in real time\n\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async(e) => {\n    e.preventDefault();\n    const {uid, photoURL, displayName} = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n      displayName\n    }); // creates new document for database\n\n    setFormValue('');\n\n    dummy.current.scrollIntoView({ behavior: 'smooth'});\n  }\n\n  return(\n    <>\n      <main>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg}/>)}\n\n        <div ref={dummy}></div>\n      </main>\n\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)}/>\n          {/* triggers on change  event */}\n        <button type=\"submit\"> send </button>\n\n      </form>\n    </>\n  )\n\n}\n\nfunction ChatMessage(props){\n  const {text, uid, photoURL, displayName } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    <div className={ `message ${messageClass}` }>\n      <img scr ={photoURL} alt=\"Avatar\" width={40} height={40}/>\n      <h1>{text}</h1>\n      <p>{displayName}</p>\n\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}